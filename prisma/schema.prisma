// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String        @unique
  passportNumber  String        @unique
  phoneNumber     String        @unique
  homePhoneNumber String?
  password        String
  role            UserRole      @default(USER)
  code            String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  voterProfile    VoterProfile?

  @@map("users")
}

model VoterProfile {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  nationalId   String      @unique
  dateOfBirth  DateTime
  isRegistered Boolean     @default(false)
  userId       String      @unique @db.ObjectId
  user         User        @relation(fields: [userId], references: [id])
  votes        Vote[]

  @@map("voter_profiles")
}


model Election {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ElectionStatus @default(UPCOMING)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  candidates  Candidate[]
  votes       Vote[]

  @@map("elections")
}

model Candidate {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  party       String
  age         Int
  gender      Gender
  education   String
  electionId  String       @db.ObjectId
  election    Election     @relation(fields: [electionId], references: [id])
  votes       Vote[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("candidates")
}
model Vote {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  voterId     String       @db.ObjectId
  candidateId String       @db.ObjectId
  electionId  String       @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  voter       VoterProfile @relation(fields: [voterId], references: [id])
  candidate   Candidate    @relation(fields: [candidateId], references: [id])
  election    Election     @relation(fields: [electionId], references: [id])

  @@unique([voterId, electionId])  // one vote per voter per election

  @@map("votes")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum ElectionStatus {
  UPCOMING
  ACTIVE
  COMPLETED
}
